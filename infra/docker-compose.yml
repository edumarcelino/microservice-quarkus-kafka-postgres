version: "3.5"

networks:
  quarkus_network:
    driver: bridge

services:
  postgres:
    build:
      context: ../database
      dockerfile: Dockerfile
    container_name: postgres_db
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user", "-d", "aks-teste-dois"]
      interval: 30s
      retries: 3
    networks:
      - quarkus_network

  #keycloak:
  #  build:
  #    context: ../keycloak
  #    dockerfile: Dockerfile
  #  container_name: keycloak
  #  command: ["start-dev", "--import-realm"]
  #  environment:
  #    KC_DB: postgres
  #    KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
  #    KC_DB_USERNAME: keycloak
  #    KC_DB_PASSWORD: keycloak
  #    KC_BOOTSTRAP_ADMIN_USERNAME: admin
  #    KC_BOOTSTRAP_ADMIN_PASSWORD: admin
  #    KC_HOSTNAME: keycloak
  #  ports:
  #    - "8080:8080"
  #  volumes:
  #    - ../keycloak/keycloak-realm.json:/opt/keycloak/data/import/realm.json
  #    - ../keycloak/keycloak.conf:/opt/keycloak/conf/keycloak.conf
  #  depends_on:
  #    postgres:
  #      condition: service_healthy
  #  healthcheck:
  #    test: ["CMD", "curl", "-f", "http://localhost:8080/realms/gpg"]
  #    interval: 10s
  #    retries: 5
  #    start_period: 30s
  #  networks:
  #    - quarkus_network


  #zookeeper:
  #  image: strimzi/kafka:0.19.0-kafka-2.5.0
  #  container_name: zookeeper
  #  command: [
  #      "sh", "-c",
  #      "bin/zookeeper-server-start.sh config/zookeeper.properties"
  #  ]
  #  ports:
  #    - "2181:2181"
  #  environment:
  #    LOG_DIR: /tmp/logs
  #  networks:
  #    - quarkus_network

  #kafka:
  #  image: strimzi/kafka:0.19.0-kafka-2.5.0
  #  container_name: kafka
  #  command: [
  #      "sh", "-c",
  #      "bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
  #  ]
  #  depends_on:
  #    - zookeeper
  #  ports:
  #    - "9092:9092"
  #  environment:
  #    LOG_DIR: "/tmp/logs"
  #    KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
  #    KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
  #    KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #  networks:
  #    - quarkus_network

  quarkus-app:
    build:
      context: ../backend
      dockerfile: src/main/docker/Dockerfile.jvm
    container_name: quarkus_app
    depends_on:
      - postgres
      #- kafka
      #- keycloak
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/aks-teste-dois
      QUARKUS_DATASOURCE_USERNAME: user
      QUARKUS_DATASOURCE_PASSWORD: password
      #KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      #QUARKUS_OIDC_AUTH_SERVER_URL: http://keycloak:8080/realms/gpg
      #QUARKUS_OIDC_CLIENT_ID: gpg_client
      #QUARKUS_OIDC_CREDENTIALS_SECRET: secret
    ports:
      - "8081:8080"
    volumes:
      - ../backend:/app
    command: ["java", "-jar", "/app/target/quarkus-app-runner.jar"]
    networks:
      - quarkus_network

  #kafdrop:
  #  image: obsidiandynamics/kafdrop:latest
  #  container_name: kafdrop
  #  ports:
  #    - "9000:9000"
  #  environment:
  #    KAFKA_BROKERCONNECT: kafka:9092
  #  depends_on:
  #    - kafka
  #  networks:
  #    - quarkus_network

  frontend-admin:
    container_name: frontend-admin
    build:
      context: ../frontend-admin
    ports:
      - "3001:80"
    networks:
      - quarkus_network
    depends_on:
      - quarkus-app
      - postgres
      #- kafka
      #- keycloak

  #frontend-portal:
  #  build:
  #    context: ../frontend-portal
  #  ports:
  #    - "3000:80"
  #  networks:
  #    - quarkus_network
  #  depends_on:
  #    - postgres
  #    - kafka
  #    - keycloak

volumes:
  postgres_data:
